#!/bin/bash
# LIGHTNING-KERNEL-BUILD

# Variables
DIR="$(pwd)"

PARENT_DIR="$(pwd)"

echo "Cloning dependencies"
git clone --depth=1 --branch b2_13_EWC5_ack https://github.com/prorooter007/Android_kernel_samsung_sm8350 kernel
cd kernel 
git clone --depth=1 --branch android-11.0.0_r48 https://android.googlesource.com/platform/prebuilts/gcc/linux-x86/aarch64/aarch64-linux-android-4.9 aarch64-linux-android-4.9
git clone --depth=1  https://github.com/prorooter007/android_prebuilts_clang_host_linux-x86_clang-6877366 clang-r383902
git clone --depth=1 https://github.com/osm0sis/AnyKernel3 AnyKernel3
echo "Done"
KERNEL_DIR=$(pwd)
OUT_DIR="$(pwd)/out"
REPACK_DIR="${KERNEL_DIR}/AnyKernel3"
IMAGE="${KERNEL_DIR}/out/arch/arm64/boot/Image.gz"
BRANCH="$(git rev-parse --abbrev-ref HEAD)"

CHIPSET_NAME=lahaina
export ARCH=arm64
export PLATFORM_VERSION=11
export ANDROID_MAJOR_VERSION=r

BUILD_CROSS_COMPILE="$(pwd)/aarch64-linux-android-4.9/bin/aarch64-linux-android-"
KERNEL_LLVM_BIN="$(pwd)/clang-r383902/bin/clang"
CLANG_TRIPLE="$(pwd)/clang-r383902/bin/aarch64-linux-gnu-"
KERNEL_MAKE_ENV="LOCALVERSION=-Lightning-V3.0"

DTS_DIR="$(pwd)/out/arch/arm64/boot/dts"

# Color
ON_BLUE=`echo -e "\033[44m"`	# On Blue
BRED=`echo -e "\033[1;31m"`	# Bold Red
BBLUE=`echo -e "\033[1;34m"`	# Bold Blue
BGREEN=`echo -e "\033[1;32m"`	# Bold Green
UNDER_LINE=`echo -e "\e[4m"`	# Text Under Line
STD=`echo -e "\033[0m"`		# Text Clear
 


 echo "${BGREEN}***** Compiling kernel *****${STD}"
  [ ! -d "out" ] && mkdir out
  make -j$(nproc) -C $(pwd) O=$(pwd)/out $KERNEL_MAKE_ENV ARCH=arm64 CROSS_COMPILE=$BUILD_CROSS_COMPILE REAL_CC=$KERNEL_LLVM_BIN CLANG_TRIPLE=$CLANG_TRIPLE CONFIG_SECTION_MISMATCH_WARN_ONLY=y vendor/r9q_eur_openx2_defconfig
  make -j$(nproc) -C $(pwd) O=$(pwd)/out $KERNEL_MAKE_ENV ARCH=arm64 CROSS_COMPILE=$BUILD_CROSS_COMPILE REAL_CC=$KERNEL_LLVM_BIN CLANG_TRIPLE=$CLANG_TRIPLE CONFIG_SECTION_MISMATCH_WARN_ONLY=y

  [ -e out/arch/arm64/boot/Image.gz ] && cp out/arch/arm64/boot/Image.gz $OUT_DIR/Image.gz
  if [ -e out/arch/arm64/boot/Image ]; then
    cp out/arch/arm64/boot/Image $OUT_DIR/Image

    DTBO_FILES=$(find ${DTS_DIR}/samsung/ -name $r9q_eur_openx_w00_r*.dtbo)
    cat ${DTS_DIR}/vendor/qcom/*.dtb > $(pwd)/out/dtb.img
    $(pwd)/tools/mkdtimg create $(pwd)/out/dtbo.img --page_size=4096 ${DTBO_FILES}

    echo "${BGREEN}***** Ready to Roar *****${STD}"
  fi

  if [ -e "$(pwd)/out/arch/arm64/boot/Image.gz" ]; then
    cd "$(pwd)/AnyKernel3"
    git reset --hard
    cp $IMAGE zImage
    
    sed -i "s/ExampleKernel by osm0sis/r9q Stock kernel by prorooter007/g" anykernel.sh
    sed -i "s/=maguro/=r9q/g" anykernel.sh
    sed -i "s/=toroplus/=/g" anykernel.sh
    sed -i "s/=toro/=/g" anykernel.sh
    sed -i "s/=tuna/=/g" anykernel.sh
    sed -i "s/omap\/omap_hsmmc\.0\/by-name\/boot/soc\/1d84000\.ufshc\/by-name\/boot/g" anykernel.sh
    sed -i "s/backup_file/#backup_file/g" anykernel.sh
    sed -i "s/replace_string/#replace_string/g" anykernel.sh
    sed -i "s/insert_line/#insert_line/g" anykernel.sh
    sed -i "s/append_file/#append_file/g" anykernel.sh
    sed -i "s/patch_fstab/#patch_fstab/g" anykernel.sh
    zip -r9 "$(pwd)/r9q_stock_kernel_.zip" * -x .git README.md *placeholder
    
    curl https://bashupload.com/$REPACK_DIR/r9q_stock_kernel_.zip --data-binary @$REPACK_DIR/r9q_stock_kernel_.zip
  fi